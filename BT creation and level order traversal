// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class node{
    int data;
    node right;
    node left;
    
    public node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BinaryTree{
    node root;
     public node createTree(node root){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the data:");
        int data = sc.nextInt();
        
        root = new node(data);
        
        if(data == -1){
            return null;
        }
        
        System.out.println("enter data for the left:");
        root.left = createTree(root.left);
        
        System.out.println("enter data for the right:");
        root.right = createTree(root.right);
        
        return root;
        
    }
    
    public void LOT(){
        Queue<node> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            node temp = q.peek();
            System.out.print(temp.data + " ");
            q.poll();
            if(temp.left != null){
                q.add(temp.left);
            }
            if(temp.right != null){
                q.add(temp.right);
            }
        }
    }
    
    public void rLOT(){
        Stack<node> s = new Stack<>();
        Queue<node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            node temp = q.peek();
            s.push(temp);
            q.poll();
            if(temp.left != null){
                q.add(temp.left);
            }
            if(temp.right != null){
                q.add(temp.right);
            }
        }
        while(!s.isEmpty()){
            node n = s.peek();
            System.out.print(n.data + " ");
            s.pop();
        }
    }
}
class HelloWorld {
   
    public static void main(String[] args) {
        BinaryTree b = new BinaryTree();
        // 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1
        b.root = new node(1);
        b.root.left = new node(3);
        b.root.right = new node(5);
        b.root.left.left = new node(7);
        b.root.left.right = new node(11);
        b.root.right.left = new node(17);
        b.LOT();
        b.rLOT();
    }
}
